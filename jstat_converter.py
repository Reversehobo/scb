import json
import pandas as pd


def get_df_row(dimensions, i=0, record=None):
    """Generate row dimension values for a pandas dataframe.

    Args:
      dimensions (list): list of pandas dataframes with dimension labels
                         generated by get_dim_label or get_dim_index methods.
      i (int): dimension list iteration index. Default is 0, it's used in the
                         recursive calls to the method.
      record (list): list of values representing a pandas dataframe row,
                     except for the value column. Default is empty, it's used
                     in the recursive calls to the method.

    Yields:
      list: list with pandas dataframe column values except for value column

    """

    if i == 0 or record is None:
        record = []

    for dimension in dimensions[i]:
        record.append(dimension)
        if len(record) == len(dimensions):
            yield record

        if i + 1 < len(dimensions):
            for row in get_df_row(dimensions, i + 1, record):
                yield row
        if len(record) == i + 1:
            record.pop()


def from_json_stat(js_dict: dict) -> pd.DataFrame:
    """Decode JSON-stat formatted data into pandas.DataFrame object.

    Args:
        js_dict (dict): JSON-stat2 formatted dictionary.

    Returns:
        pd.DataFrame: DataFrame with converted data.
    """

    if type(js_dict) is not dict:
        raise ValueError("Invalid input data type. Expected dict, got {type(dataset)}")

    dimensions = []

    for dim in js_dict["id"]:
        dim_index = js_dict["dimension"][dim]["category"]["index"]
        dimensions.append(dim_index)

    values = js_dict["value"]
    output = pd.DataFrame(
        [category + [values[i]] for i, category in enumerate(get_df_row(dimensions))]
    )
    output.columns = js_dict["id"] + ["value"]
    output.index = range(0, len(values))
    output.replace({float("nan"): None})
    return output


def populate_json_stat(df: pd.DataFrame, json_template: dict) -> dict:
    """
    Populates a JSON-stat 2.0 template with data from a dataframe efficiently,
    while handling missing or empty values.

    Args:
    df (pd.DataFrame): A dataframe containing
    json_file (str): Path to the JSON-stat 2.0 template file.

    Returns:
    dict: A populated JSON-stat 2.0 structure.
    """
    dimensions = df.columns[:-1]

    # Populate "size" with unique counts for each dimension
    json_template["size"] = df[dimensions].nunique().tolist()

    # Fill "index" for each dimension category using vectorized operations
    for col in dimensions:
        unique_vals = df[col].astype(str).unique()
        json_template["dimension"][col]["category"]["index"] = {
            val: idx for idx, val in enumerate(unique_vals)
        }

    json_template["value"] = df.iloc[:, -1].tolist()

    return json_template


def combine_to_template(jstat_dicts: list[dict]) -> dict:
    """
    Combines multiple JSON-stat dictionaries into a single template.

    Args:
    jstat_dicts: A list of JSON-stat dictionaries.

    Returns:
    A combined JSON-stat template.
    """
    combined_template = jstat_dicts[0].copy()
    all_dimension_ids = list(combined_template["dimension"].keys())
    dim_id_to_label_dict = {dim: {} for dim in all_dimension_ids}

    for jstat_dict in jstat_dicts:
        for dim_id in all_dimension_ids:
            dim_id_to_label_dict[dim_id].update(
                jstat_dict["dimension"][dim_id]["category"]["label"]
            )

    # Populate the "label" field for each dimension category in the combined template
    for dim_id, label_dict in dim_id_to_label_dict.items():
        combined_template["dimension"][dim_id]["category"]["label"] = label_dict

    # pop the "status" field if it exists
    combined_template.pop("status", None)

    return combined_template


def combine_jsonstat_datasets(jstat_list: list[dict]) -> dict:
    """
    Combines multiple JSON-stat2 datasets into a single dataset.

    Args:
        jstat_list: A list of JSON-stat2 datasets.

    Returns:
        A combined JSON-stat2 dataset.
    """
    # Convert all dicts to dataframes
    dataframes = [from_json_stat(jstat) for jstat in jstat_list]

    # Merge the dataframes
    merged_df = pd.concat(dataframes, ignore_index=True)

    # Get the combined template
    combined_template = combine_to_template(jstat_list)

    # Populate the combined template with the merged data
    combined_jsonstat = populate_json_stat(merged_df, combined_template)

    return combined_jsonstat


# file_name = "test_data/TAB1267_en.json"
# save_name = "test_data/TAB1267_en_combined_5.json"
# with open(file_name, "r", encoding="utf-8") as f:
#     data = json.load(f)

# print(len(data))

# combined_jsonstat = combine_jsonstat_datasets(data)

# with open(save_name, "w", encoding="utf-8") as f:
#     json.dump(combined_jsonstat, f, ensure_ascii=False, indent=4)
